//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/CustomControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomControl"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""21cdbf97-092b-4b57-8537-aa1a964abf2f"",
            ""actions"": [
                {
                    ""name"": ""LeftTouch"",
                    ""type"": ""Value"",
                    ""id"": ""3571841d-62d9-4e2e-aab9-b53e557388be"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTouch"",
                    ""type"": ""Value"",
                    ""id"": ""4edec473-d11a-427a-9c19-73daa138dc78"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftMenu"",
                    ""type"": ""Value"",
                    ""id"": ""24c24c7e-c0ea-4ac1-bb44-633ad85f298e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightMenu"",
                    ""type"": ""Value"",
                    ""id"": ""a61c8cd8-7157-4f07-b20b-0b69033434b6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftGrip"",
                    ""type"": ""Value"",
                    ""id"": ""700693c0-e18c-4d72-b7bc-05d594b3a441"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftConnect"",
                    ""type"": ""Value"",
                    ""id"": ""3b4b5e33-b8f1-4e83-9062-5cbc0592b1cb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightGrip"",
                    ""type"": ""Value"",
                    ""id"": ""63534266-0887-4226-a4eb-8369a6aab8b6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightConnect"",
                    ""type"": ""Value"",
                    ""id"": ""d0cfdce0-eb25-4863-b978-21acaa5ce342"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftTouchClick"",
                    ""type"": ""Value"",
                    ""id"": ""779d42fe-2596-43ec-9a0a-8302ec243755"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTouchClick"",
                    ""type"": ""Value"",
                    ""id"": ""afb30398-9abd-4c17-8665-72bb88748633"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ee27c692-64f9-4830-825a-122fe3ff7fa3"",
                    ""path"": ""<XRController>{LeftHand}/trackpadTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9c43988-1afd-49a0-9e46-bd14699f3eb5"",
                    ""path"": ""<XRController>{RightHand}/touchpadTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8391c365-11bb-4dc1-8768-005d4bebd358"",
                    ""path"": ""<XRController>{LeftHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99793be9-937c-493e-ad33-e998af5018a5"",
                    ""path"": ""<XRController>{RightHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9aaa1aa7-f135-484a-8c74-dc55e23a6689"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24e9f1bc-c5a3-4a49-a36c-f6b4b7875183"",
                    ""path"": ""<XRInputV1::OpenXR::HeadTrackingOpenXR>/userpresence"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftConnect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9282ca12-a43b-400e-9a59-6315fe3743d1"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6626c8f-8019-4ed9-b33a-c46d656e0346"",
                    ""path"": ""<XRInputV1::OpenXR::HeadTrackingOpenXR>/userpresence"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightConnect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62ab5099-1876-442b-998b-75ef0aa7659a"",
                    ""path"": ""<XRController>{LeftHand}/trackpadClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTouchClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d5154f4-eb69-4ef8-83ef-9e88dfe9f434"",
                    ""path"": ""<XRController>{RightHand}/trackpadClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTouchClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_LeftTouch = m_Player.FindAction("LeftTouch", throwIfNotFound: true);
        m_Player_RightTouch = m_Player.FindAction("RightTouch", throwIfNotFound: true);
        m_Player_LeftMenu = m_Player.FindAction("LeftMenu", throwIfNotFound: true);
        m_Player_RightMenu = m_Player.FindAction("RightMenu", throwIfNotFound: true);
        m_Player_LeftGrip = m_Player.FindAction("LeftGrip", throwIfNotFound: true);
        m_Player_LeftConnect = m_Player.FindAction("LeftConnect", throwIfNotFound: true);
        m_Player_RightGrip = m_Player.FindAction("RightGrip", throwIfNotFound: true);
        m_Player_RightConnect = m_Player.FindAction("RightConnect", throwIfNotFound: true);
        m_Player_LeftTouchClick = m_Player.FindAction("LeftTouchClick", throwIfNotFound: true);
        m_Player_RightTouchClick = m_Player.FindAction("RightTouchClick", throwIfNotFound: true);
    }

    ~@CustomControl()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, CustomControl.Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_LeftTouch;
    private readonly InputAction m_Player_RightTouch;
    private readonly InputAction m_Player_LeftMenu;
    private readonly InputAction m_Player_RightMenu;
    private readonly InputAction m_Player_LeftGrip;
    private readonly InputAction m_Player_LeftConnect;
    private readonly InputAction m_Player_RightGrip;
    private readonly InputAction m_Player_RightConnect;
    private readonly InputAction m_Player_LeftTouchClick;
    private readonly InputAction m_Player_RightTouchClick;
    public struct PlayerActions
    {
        private @CustomControl m_Wrapper;
        public PlayerActions(@CustomControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftTouch => m_Wrapper.m_Player_LeftTouch;
        public InputAction @RightTouch => m_Wrapper.m_Player_RightTouch;
        public InputAction @LeftMenu => m_Wrapper.m_Player_LeftMenu;
        public InputAction @RightMenu => m_Wrapper.m_Player_RightMenu;
        public InputAction @LeftGrip => m_Wrapper.m_Player_LeftGrip;
        public InputAction @LeftConnect => m_Wrapper.m_Player_LeftConnect;
        public InputAction @RightGrip => m_Wrapper.m_Player_RightGrip;
        public InputAction @RightConnect => m_Wrapper.m_Player_RightConnect;
        public InputAction @LeftTouchClick => m_Wrapper.m_Player_LeftTouchClick;
        public InputAction @RightTouchClick => m_Wrapper.m_Player_RightTouchClick;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @LeftTouch.started += instance.OnLeftTouch;
            @LeftTouch.performed += instance.OnLeftTouch;
            @LeftTouch.canceled += instance.OnLeftTouch;
            @RightTouch.started += instance.OnRightTouch;
            @RightTouch.performed += instance.OnRightTouch;
            @RightTouch.canceled += instance.OnRightTouch;
            @LeftMenu.started += instance.OnLeftMenu;
            @LeftMenu.performed += instance.OnLeftMenu;
            @LeftMenu.canceled += instance.OnLeftMenu;
            @RightMenu.started += instance.OnRightMenu;
            @RightMenu.performed += instance.OnRightMenu;
            @RightMenu.canceled += instance.OnRightMenu;
            @LeftGrip.started += instance.OnLeftGrip;
            @LeftGrip.performed += instance.OnLeftGrip;
            @LeftGrip.canceled += instance.OnLeftGrip;
            @LeftConnect.started += instance.OnLeftConnect;
            @LeftConnect.performed += instance.OnLeftConnect;
            @LeftConnect.canceled += instance.OnLeftConnect;
            @RightGrip.started += instance.OnRightGrip;
            @RightGrip.performed += instance.OnRightGrip;
            @RightGrip.canceled += instance.OnRightGrip;
            @RightConnect.started += instance.OnRightConnect;
            @RightConnect.performed += instance.OnRightConnect;
            @RightConnect.canceled += instance.OnRightConnect;
            @LeftTouchClick.started += instance.OnLeftTouchClick;
            @LeftTouchClick.performed += instance.OnLeftTouchClick;
            @LeftTouchClick.canceled += instance.OnLeftTouchClick;
            @RightTouchClick.started += instance.OnRightTouchClick;
            @RightTouchClick.performed += instance.OnRightTouchClick;
            @RightTouchClick.canceled += instance.OnRightTouchClick;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @LeftTouch.started -= instance.OnLeftTouch;
            @LeftTouch.performed -= instance.OnLeftTouch;
            @LeftTouch.canceled -= instance.OnLeftTouch;
            @RightTouch.started -= instance.OnRightTouch;
            @RightTouch.performed -= instance.OnRightTouch;
            @RightTouch.canceled -= instance.OnRightTouch;
            @LeftMenu.started -= instance.OnLeftMenu;
            @LeftMenu.performed -= instance.OnLeftMenu;
            @LeftMenu.canceled -= instance.OnLeftMenu;
            @RightMenu.started -= instance.OnRightMenu;
            @RightMenu.performed -= instance.OnRightMenu;
            @RightMenu.canceled -= instance.OnRightMenu;
            @LeftGrip.started -= instance.OnLeftGrip;
            @LeftGrip.performed -= instance.OnLeftGrip;
            @LeftGrip.canceled -= instance.OnLeftGrip;
            @LeftConnect.started -= instance.OnLeftConnect;
            @LeftConnect.performed -= instance.OnLeftConnect;
            @LeftConnect.canceled -= instance.OnLeftConnect;
            @RightGrip.started -= instance.OnRightGrip;
            @RightGrip.performed -= instance.OnRightGrip;
            @RightGrip.canceled -= instance.OnRightGrip;
            @RightConnect.started -= instance.OnRightConnect;
            @RightConnect.performed -= instance.OnRightConnect;
            @RightConnect.canceled -= instance.OnRightConnect;
            @LeftTouchClick.started -= instance.OnLeftTouchClick;
            @LeftTouchClick.performed -= instance.OnLeftTouchClick;
            @LeftTouchClick.canceled -= instance.OnLeftTouchClick;
            @RightTouchClick.started -= instance.OnRightTouchClick;
            @RightTouchClick.performed -= instance.OnRightTouchClick;
            @RightTouchClick.canceled -= instance.OnRightTouchClick;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnLeftTouch(InputAction.CallbackContext context);
        void OnRightTouch(InputAction.CallbackContext context);
        void OnLeftMenu(InputAction.CallbackContext context);
        void OnRightMenu(InputAction.CallbackContext context);
        void OnLeftGrip(InputAction.CallbackContext context);
        void OnLeftConnect(InputAction.CallbackContext context);
        void OnRightGrip(InputAction.CallbackContext context);
        void OnRightConnect(InputAction.CallbackContext context);
        void OnLeftTouchClick(InputAction.CallbackContext context);
        void OnRightTouchClick(InputAction.CallbackContext context);
    }
}
